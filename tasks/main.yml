---
- include_vars: ../vars/main.yml

# pre-flight checks ###########################################################

- name: Check that a Remote CIDR was passed into the play as an extra variable
  assert:
    that: 'remote_cidr is defined'

- name: Check that an environment was passed into the play as an extra variable
  assert:
    that: 'aws_env is defined'


###############################################################################

# 1- create the VPC ###############################################################

- name: Create the VPC
  ec2_vpc_net:
    name:             "{{ vpc_name }}"
    cidr_block:       "{{ vpc_cidr }}"
    state:            "present"
  register: myvpc

- name: Create variable for VPC ID
  set_fact:
    vpc_id: "{{ myvpc.vpc.id }}"

# 2- create subnets

- name: Create AZ1 public subnet
  ec2_vpc_subnet:
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_az1_cidr }}"
    az:               "{{ aws_az1 }}"
    state:            "present"
    map_public:       yes
    tags:
      Name:           "{{ aws_env }}_public_az1"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
  register: pub_subnet_az1

- name: Create variable for AZ1 public subnet
  set_fact:
    public_subnet_az1_id: "{{ pub_subnet_az1.subnet.id }}"

- name: Create AZ1 private subnet
  ec2_vpc_subnet:
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ private_subnet_az1_cidr }}"
    az:               "{{ aws_az1 }}"
    state:            "present"
    region:           "{{ aws_region }}"
    tags:
      Name:           "{{ aws_env }}_private_az1"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
  register: priv_subnet_az1

- name: Create variable for AZ1 private subnet
  set_fact:
    private_subnet_az1_id: "{{ priv_subnet_az1.subnet.id }}"

- name: Create AZ2 public subnet
  ec2_vpc_subnet:
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_az2_cidr }}"
    az:               "{{ aws_az2 }}"
    state:            "present"
    region:           "{{ aws_region }}"
    map_public:       yes
    tags:
      Name:           "{{ aws_env }}_public_az2"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
  register: pub_subnet_az2

- name: Create variable for AZ2 public subnet
  set_fact:
    public_subnet_az2_id: "{{ pub_subnet_az2.subnet.id }}"

- name: Create AZ2 private subnet
  ec2_vpc_subnet:
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ private_subnet_az2_cidr }}"
    az:               "{{ aws_az2 }}"
    state:            "present"
    region:           "{{ aws_region }}"
    tags:
      Name:           "{{ aws_env }}_private_az2"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
  register: priv_subnet_az2

- name: Create variable for AZ2 private subnet
  set_fact:
    private_subnet_az2_id: "{{ priv_subnet_az2.subnet.id }}"

# create Internet gateway for the VPC

- name: Create the Internet gateway for the VPC
  ec2_vpc_igw:
    vpc_id:           "{{ vpc_id }}"
    state:            "present"
    region:           "{{ aws_region }}"
    tags:
      Name:           "{{ aws_env }}_igw"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
  register: myvpc_igw

- name: Create variable for IGW id
  set_fact:
    igw_id: "{{ myvpc_igw.gateway_id }}"

# no tags support in ec2_vpc_igw module as of Ansible v2.2.0.0
# - name: Tag IGW
#   ec2_tag:
#     resource: "{{ igw_id }}"
#     state: present
#     tags:
#       Name:           "{{ aws_env }}_igw"
#       VPC:            "{{ vpc_name }}"
#       Environment:    "{{ aws_env }}"

# create NAT Gateways

- name: Create AZ1 NAT Gateway
  ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ public_subnet_az1_id }}"
    wait: yes
    if_exist_do_not_create: true
  register: nat_gateway_az1

- name: Create variable for AZ1 NAT Gateway
  set_fact:
    nat_gateway_id_az1: "{{ nat_gateway_az1.nat_gateway_id }}"


- name: Create AZ2 NAT Gateway
  ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ public_subnet_az2_id }}"
    wait: yes
    if_exist_do_not_create: true
  register: nat_gateway_az2

- name: Create variable for AZ2 NAT Gateway
  set_fact:
    nat_gateway_id_az2: "{{ nat_gateway_az2.nat_gateway_id }}"

# # persist NGWs id for later
# - name: Tag VPC with NAT Gateway IDs
#   ec2_tag:
#     resource: "{{ vpc_id }}"
#     state: present
#     tags:
#       Name:           "{{ vpc_name }}"

# create route tables

- name: Create public route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    tags:
      Name:           "{{ aws_env }}_public_rt"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    routes:
      - dest: "{{ public_cidr }}"
        gateway_id: "{{ igw_id }}"
  register: public_route_table

- name: Create AZ1 private route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    tags:
      Name:           "{{ aws_env }}_private_rt_az1"
      VPC:            "{{ vpc_name }}"
      Environment:    "{{ aws_env }}"
    subnets:
      - "{{ private_subnet_az1_id }}"
    routes:
      - dest: "{{ public_cidr }}"
        gateway_id: "{{ nat_gateway_id_az1 }}"

- name: Create AZ2 private route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    tags:
      Name:          "{{ aws_env }}_private_rt_az2"
      VPC:           "{{ vpc_name }}"
      Environment:   "{{ aws_env }}"
    subnets:
      - "{{ private_subnet_az2_id }}"
    routes:
      - dest: "{{ public_cidr }}"
        gateway_id: "{{ nat_gateway_id_az2 }}"

# Bastion server: can only be accessed by TCP from specified remote IPs
- name: Create security group for bastion server
  ec2_group:
    name: "{{ bastion_sg_name }}"
    description: "Bastion instance security group"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto:      "tcp"
        from_port:  "22"
        to_port:    "22"
        cidr_ip:    "{{ remote_cidr }}"
    # rules_egress:
    #   - proto:      "tcp"
    #     from_port:  "22"
    #     to_port:    "22"
    #     group_name: "{{ private_sg_name }}"
  register: bastion_instance_sg

- name: Create variable for bastion instance security group id
  set_fact:
    private_instance_sg_id: "{{ bastion_instance_sg.group_id }}"

# Private servers: can be accessed http and https from machines in a private subnet
# By SSH must be from Bastion server SG
- name: Create private instance security group
  ec2_group:
    name: "{{ private_sg_name }}"
    description: "Private instance security group"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto:      "tcp"
        from_port:  "80"
        to_port:    "80"
        group_name: "{{ private_sg_name }}"
      - proto:      "tcp"
        from_port:  "443"
        to_port:    "443"
        group_name: "{{ private_sg_name }}"
      - proto:      "tcp"
        from_port:  "22"
        to_port:    "22"
        group_name: "{{ bastion_sg_name }}"
      - proto:      "tcp"
        from_port:  "3306"
        to_port:    "3306"
        cidr_ip:    "{{ vpc_cidr }}"
    rules_egress:
      - proto:      "tcp"
        from_port:  "80"
        to_port:    "80"
        cidr_ip:    "{{ public_cidr }}"
      - proto:      "tcp"
        from_port:  "443"
        to_port:    "443"
        cidr_ip:    "{{ public_cidr }}"
      - proto:      "tcp"
        from_port:  "22"
        to_port:    "22"
        group_name: "{{ private_sg_name }}"
  register: private_instance_sg

- name: Create variable for private instance security group id
  set_fact:
    private_instance_sg_id: "{{ private_instance_sg.group_id }}"

- name: Create public instance security group
  ec2_group:
    name: "{{ public_sg_name }}"
    description: "Public instance security group"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto:      "tcp"
        from_port:  "80"
        to_port:    "80"
        cidr_ip:    "{{ public_cidr }}"
      - proto:      "tcp"
        from_port:  "443"
        to_port:    "443"
        cidr_ip:    "{{ public_cidr }}"
      - proto:      "tcp"
        from_port:  "22"
        to_port:    "22"
        cidr_ip:    "{{ remote_cidr }}"
    rules_egress:
      - proto:      "tcp"
        from_port:  "22"
        to_port:    "22"
        group_name: "{{ private_sg_name }}"
      - proto:      "tcp"
        from_port:  "80"
        to_port:    "80"
        cidr_ip:    "{{ public_cidr }}"
      - proto:      "tcp"
        from_port:  "443"
        to_port:    "443"
        cidr_ip:    "{{ public_cidr }}"
      - proto:      "tcp"
        from_port:  "3306"
        to_port:    "3306"
        group_name: "{{ private_sg_name }}"
  register: public_instance_sg

- name: Create variable for public instance security group id
  set_fact:
    public_instance_sg_id: "{{ public_instance_sg.group_id }}"

# # no tags support in ec2_group module as of Ansible v2.2.0.0
# - name: Tag private security group
#   ec2_tag:
#     resource: "{{ private_instance_sg_id }}"
#     state: present
#     tags:
#       Name:           "{{ aws_env }}_private_sg"
#       VPC:            "{{ vpc_name }}"
#       Environment:    "{{ aws_env }}"
#
# - name: Tag public security group
#   ec2_tag:
#     resource: "{{ public_instance_sg_id }}"
#     state: present
#     tags:
#       Name:           "{{ aws_env }}_public_sg"
#       VPC:            "{{ vpc_name }}"
#       Environment:    "{{ aws_env }}"

- name: Create and associate private network ACL with private subnets
  ec2_vpc_nacl:
    vpc_id: "{{ vpc_id }}"
    name:   "{{ vpc_name}}_private_networkacl"
    subnets: [ "{{ private_subnet_az1_id }}", "{{ private_subnet_az2_id }}" ]
    tags:
      Environment: "{{ aws_env }}"
    ingress: [
        # rule no, protocol, allow/deny, cidr, icmp_code, icmp_type, port from, port to
        [100, 'tcp', 'allow', "{{ public_cidr }}", null, null, 80, 80],
        [110, 'tcp', 'allow', "{{ public_cidr }}", null, null, 443, 443],
        [120, 'tcp', 'allow', "{{ vpc_cidr }}", null, null, 22, 22],
        [140, 'tcp', 'allow', "{{ public_cidr }}", null, null, 1024, 65535],
        [150, 'icmp', 'allow', "{{ vpc_cidr }}", -1, -1]
     ]
    egress: [
        [100, 'tcp', 'allow', "{{ public_cidr }}", null, null, 80, 80],
        [110, 'tcp', 'allow', "{{ public_cidr }}", null, null, 443, 443],
        [120, 'tcp', 'allow', "{{ vpc_cidr }}", null, null, 1024, 65535],
        [150, 'tcp', 'allow', "{{ private_subnet_az1_cidr }}", null, null, 22, 22],
        [151, 'tcp', 'allow', "{{ private_subnet_az2_cidr }}", null, null, 22, 22],
        [160, 'icmp', 'allow', "{{ vpc_cidr }}", -1, -1]
     ]
    state: "present"

- name: Create and associate public network ACL with public subnets
  ec2_vpc_nacl:
    vpc_id: "{{ vpc_id }}"
    name:   "{{ vpc_name}}_public_networkacl"
    subnets: [ "{{ public_subnet_az1_id }}", "{{ public_subnet_az2_id }}" ]
    tags:
      Environment: "{{ aws_env }}"
    ingress: [
        # rule no, protocol, allow/deny, cidr, icmp_code, icmp_type, port from, port to
        [100, 'tcp', 'allow', "{{ public_cidr }}", null, null, 80, 80],
        [110, 'tcp', 'allow', "{{ public_cidr }}", null, null, 443, 443],
        [120, 'tcp', 'allow', "{{ remote_cidr }}", null, null, 22, 22],
        [140, 'tcp', 'allow', "{{ public_cidr }}", null, null, 1024, 65535],
        [150, 'icmp', 'allow', "{{ vpc_cidr }}", -1, -1]
     ]
    egress: [
        [100, 'tcp', 'allow', "{{ public_cidr }}", null, null, 80, 80],
        [110, 'tcp', 'allow', "{{ public_cidr }}", null, null, 443, 443],
        [130, 'tcp', 'allow', "{{ private_subnet_az1_cidr }}", null, null, 3306, 3306],
        [131, 'tcp', 'allow', "{{ private_subnet_az2_cidr }}", null, null, 3306, 3306],
        [140, 'tcp', 'allow', "{{ public_cidr }}", null, null, 1024, 65535],
        [150, 'tcp', 'allow', "{{ private_subnet_az1_cidr }}", null, null, 22, 22],
        [151, 'tcp', 'allow', "{{ private_subnet_az2_cidr }}", null, null, 22, 22],
        [160, 'icmp', 'allow', "{{ public_cidr }}", -1, -1]
     ]
    state: "present"

- name: Create a RDS subnet group for private subnets
  rds_subnet_group:
    name: "dbsubnetgroup_{{ vpc_name }}_private"
    description: "Allows RDS communication between private subnets"
    subnets: [ "{{ private_subnet_az1_id }}", "{{ private_subnet_az2_id }}" ]
    region: "{{ aws_region }}"
    state: "present"

- name: Create a public machine in AZ1
  ec2_instance:
    name: "{{ aws_env }}-public1"
    key_name: "KeyPair"
    vpc_subnet_id: "{{ public_subnet_az1_id }}"
    instance_type: t2.micro
    security_group: "{{ public_sg_name }}"
    tenancy: default
    user_data: |
            #!/bin/bash
            yum update
            yum install httpd -y
            service httpd start
            chkconfig httpd on
    instance_role: "{{ iam_role }}"
    network:
      assign_public_ip: true
    image_id: ami-00ee3b59e07408c27
  register: public_ec2_1

- name: Create variable for EC2 ID in public AZ1
  set_fact:
    vpc_id_1: "{{ public_ec2_1.instance_ids[0] }}"

- name: Create a public machine in AZ2
  ec2_instance:
    name: "{{ aws_env }}-public2"
    key_name: "KeyPair"
    vpc_subnet_id: "{{ public_subnet_az2_id }}"
    instance_type: t2.micro
    security_group: "{{ public_sg_name }}"
    tenancy: default
    user_data: |
            #!/bin/bash
            yum update
            yum install httpd -y
            service httpd start
            chkconfig httpd on
    instance_role: "{{ iam_role }}"
    network:
      assign_public_ip: true
    image_id: ami-00ee3b59e07408c27
  register: public_ec2_2

- name: Create variable for EC2 ID in public AZ2
  set_fact:
    vpc_id_2: "{{ public_ec2_2.instance_ids[0] }}"

- name: Create a private machine in AZ1
  ec2_instance:
    name: "{{ aws_env }}-private1"
    key_name: "KeyPair"
    vpc_subnet_id: "{{ private_subnet_az1_id }}"
    instance_type: t2.micro
    security_group: "{{ private_sg_name }}"
    tenancy: default
    network:
      assign_public_ip: false
    image_id: ami-00ee3b59e07408c27
  register: private_ec2_1

- name: Create variable for EC2 ID in private AZ1
  set_fact:
    vpc_id_1: "{{ private_ec2_1.instance_ids[0] }}"

########################
# Set up load balancer
########################

# Make a target group

- name: Create a target group for the two public instances
  elb_target_group:
      name: mytargetgroup
      region: "{{ aws_region }}"
      protocol: http
      port: 80
      vpc_id: "{{ vpc_id }}"
      health_check_path: /
      health_check_port: 80
      health_check_protocol: http
      successful_response_codes: "200,250-260"
      state: present
      wait_timeout: 600
      wait: True

# Make Application ELB

- name: Create Application Load Balancer for the two public subnets
  elb_application_lb:
    name: myelb
    security_groups:
      - "{{ public_instance_sg_id }}"
    subnets:
      - "{{ public_subnet_az1_id }}"
      - "{{ public_subnet_az2_id }}"
    listeners:
      - Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupName: mytargetgroup
    state: present

# Add the public EC2 instances to the ELB Target Group
- elb_target:
    target_group_name: mytargetgroup
    target_id: "{{ item }}"
    state: present
  with_items:
    - "{{ vpc_id_1 }}"
    - "{{ vpc_id_2 }}"
